{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMYXyydn284uk4dgVwlgUnm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":162},"id":"redtAnq_X0PZ","executionInfo":{"status":"ok","timestamp":1761211491945,"user_tz":-330,"elapsed":124721,"user":{"displayName":"Anirudh Y","userId":"18008724648865642661"}},"outputId":"225915aa-6397-4896-a0dd-78fd129b63b5"},"outputs":[{"output_type":"stream","name":"stdout","text":["📤 Upload image, video, or audio file for deepfake detection:\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-31329367-ec3f-4911-bc7c-a0d208994d13\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-31329367-ec3f-4911-bc7c-a0d208994d13\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Predator_Wallpaper_04_3840x2400.jpg to Predator_Wallpaper_04_3840x2400.jpg\n","\n","📁 File: Predator_Wallpaper_04_3840x2400.jpg\n","📢 Detection Result:\n","✅ Real Image (Confidence: 50%)\n"]}],"source":["# ✅ Install required packages (for Colab)\n","!pip install opencv-python-headless pandas librosa soundfile scikit-learn --quiet\n","\n","# ✅ Imports\n","import os\n","import cv2\n","import numpy as np\n","import librosa\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.svm import SVC\n","from google.colab import files\n","from PIL import Image\n","\n","# ✅ Image Detection Function\n","def is_fake_image(img_path):\n","    image = cv2.imread(img_path)\n","    if image is None:\n","        return \"❌ Could not read image.\", None\n","\n","    height, width = image.shape[:2]\n","\n","    # Dummy confidence logic (placeholder)\n","    fake_confidence = round(np.clip((height * width) % 100, 50, 99), 2)\n","\n","    if fake_confidence > 75:\n","        return f\"🛑 Possibly AI-generated Image (Confidence: {fake_confidence}%)\", fake_confidence\n","    else:\n","        return f\"✅ Real Image (Confidence: {100 - fake_confidence}%)\", 100 - fake_confidence\n","\n","\n","# ✅ Video Detection Function\n","def is_fake_video(video_path):\n","    cap = cv2.VideoCapture(video_path)\n","    if not cap.isOpened():\n","        return \"❌ Could not read video.\", None\n","\n","    width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)\n","    height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)\n","    fps = cap.get(cv2.CAP_PROP_FPS)\n","    frame_count = cap.get(cv2.CAP_PROP_FRAME_COUNT)\n","    duration = frame_count / fps if fps > 0 else 0\n","\n","    complexity = width * height * duration\n","    fake_confidence = round(np.clip((complexity % 100), 50, 99), 2)\n","    cap.release()\n","\n","    if fake_confidence > 75:\n","        return f\"🛑 Possibly AI-generated Video (Confidence: {fake_confidence}%)\", fake_confidence\n","    else:\n","        return f\"✅ Real Video (Confidence: {100 - fake_confidence}%)\", 100 - fake_confidence\n","\n","\n","# ✅ Audio Feature Extraction\n","def extract_features(audio_file):\n","    audio, sr = librosa.load(audio_file, sr=None)\n","    mfccs = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=13)\n","    mfccs_scaled = np.mean(mfccs, axis=1)\n","    return mfccs_scaled\n","\n","\n","# ✅ Audio Model Loader (Dummy SVM)\n","def load_audio_model():\n","    model = SVC()\n","    real_features = np.random.rand(10, 13)\n","    fake_features = np.random.rand(10, 13)\n","    X_train = np.vstack([real_features, fake_features])\n","    y_train = np.array([0]*10 + [1]*10)\n","    scaler = StandardScaler()\n","    X_train_scaled = scaler.fit_transform(X_train)\n","    model.fit(X_train_scaled, y_train)\n","    return model, scaler\n","\n","\n","# ✅ Audio Detection Function\n","def detect_deepfake_audio(audio_file, model, scaler):\n","    features = extract_features(audio_file)\n","    features_scaled = scaler.transform([features])\n","    prediction = model.predict(features_scaled)\n","    return \"✅ Real Audio\" if prediction == 0 else \"🛑 Deepfake Audio\"\n","\n","\n","# ✅ Master Function\n","def main():\n","    print(\"📤 Upload image, video, or audio file for deepfake detection:\")\n","    uploaded = files.upload()\n","    model, scaler = load_audio_model()\n","\n","    for file_name in uploaded.keys():\n","        ext = file_name.split('.')[-1].lower()\n","        print(f\"\\n📁 File: {file_name}\")\n","\n","        if ext in ['jpg', 'jpeg', 'png']:\n","            result, _ = is_fake_image(file_name)\n","        elif ext in ['mp4', 'avi', 'mov', 'mkv']:\n","            result, _ = is_fake_video(file_name)\n","        elif ext in ['wav', 'mp3', 'flac', 'ogg']:\n","            result = detect_deepfake_audio(file_name, model, scaler)\n","        else:\n","            result = \"❌ Unsupported file type.\"\n","\n","        print(\"📢 Detection Result:\")\n","        print(result)\n","\n","\n","# ✅ Entry Point (fixed)\n","if __name__ == \"__main__\":\n","    main()\n"]},{"cell_type":"code","source":["# ✅ Install required packages (for Colab)\n","!pip install opencv-python-headless pandas librosa soundfile scikit-learn --quiet\n","\n","# ✅ Imports\n","import os\n","import cv2\n","import numpy as np\n","import librosa\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.svm import SVC\n","from google.colab import files\n","from PIL import Image\n","\n","# ✅ Image Detection Function\n","def is_fake_image(img_path):\n","    image = cv2.imread(img_path)\n","    if image is None:\n","        return \"❌ Could not read image.\", None\n","\n","    height, width = image.shape[:2]\n","\n","    # Dummy confidence logic (placeholder)\n","    fake_confidence = round(np.clip((height * width) % 100, 50, 99), 2)\n","\n","    if fake_confidence > 75:\n","        return f\"🛑 Possibly AI-generated Image (Confidence: {fake_confidence}%)\", fake_confidence\n","    else:\n","        return f\"✅ Real Image (Confidence: {100 - fake_confidence}%)\", 100 - fake_confidence\n","\n","\n","# ✅ Video Detection Function\n","def is_fake_video(video_path):\n","    cap = cv2.VideoCapture(video_path)\n","    if not cap.isOpened():\n","        return \"❌ Could not read video.\", None\n","\n","    width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)\n","    height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)\n","    fps = cap.get(cv2.CAP_PROP_FPS)\n","    frame_count = cap.get(cv2.CAP_PROP_FRAME_COUNT)\n","    duration = frame_count / fps if fps > 0 else 0\n","\n","    complexity = width * height * duration\n","    fake_confidence = round(np.clip((complexity % 100), 50, 99), 2)\n","    cap.release()\n","\n","    if fake_confidence > 75:\n","        return f\"🛑 Possibly AI-generated Video (Confidence: {fake_confidence}%)\", fake_confidence\n","    else:\n","        return f\"✅ Real Video (Confidence: {100 - fake_confidence}%)\", 100 - fake_confidence\n","\n","\n","# ✅ Audio Feature Extraction\n","def extract_features(audio_file):\n","    audio, sr = librosa.load(audio_file, sr=None)\n","    mfccs = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=13)\n","    mfccs_scaled = np.mean(mfccs, axis=1)\n","    return mfccs_scaled\n","\n","\n","# ✅ Audio Model Loader (Dummy SVM)\n","def load_audio_model():\n","    model = SVC()\n","    real_features = np.random.rand(10, 13)\n","    fake_features = np.random.rand(10, 13)\n","    X_train = np.vstack([real_features, fake_features])\n","    y_train = np.array([0]*10 + [1]*10)\n","    scaler = StandardScaler()\n","    X_train_scaled = scaler.fit_transform(X_train)\n","    model.fit(X_train_scaled, y_train)\n","    return model, scaler\n","\n","\n","# ✅ Audio Detection Function\n","def detect_deepfake_audio(audio_file, model, scaler):\n","    features = extract_features(audio_file)\n","    features_scaled = scaler.transform([features])\n","    prediction = model.predict(features_scaled)\n","    return \"✅ Real Audio\" if prediction == 0 else \"🛑 Deepfake Audio\"\n","\n","\n","# ✅ Master Function\n","def main():\n","    print(\"📤 Upload image, video, or audio file for deepfake detection:\")\n","    uploaded = files.upload()\n","    model, scaler = load_audio_model()\n","\n","    for file_name in uploaded.keys():\n","        ext = file_name.split('.')[-1].lower()\n","        print(f\"\\n📁 File: {file_name}\")\n","\n","        if ext in ['jpg', 'jpeg', 'png']:\n","            result, _ = is_fake_image(file_name)\n","        elif ext in ['mp4', 'avi', 'mov', 'mkv']:\n","            result, _ = is_fake_video(file_name)\n","        elif ext in ['wav', 'mp3', 'flac', 'ogg']:\n","            result = detect_deepfake_audio(file_name, model, scaler)\n","        else:\n","            result = \"❌ Unsupported file type.\"\n","\n","        print(\"📢 Detection Result:\")\n","        print(result)\n","\n","\n","# ✅ Entry Point (fixed)\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":162},"id":"RRwFugf0X1UC","executionInfo":{"status":"ok","timestamp":1761211860120,"user_tz":-330,"elapsed":217825,"user":{"displayName":"Anirudh Y","userId":"18008724648865642661"}},"outputId":"b6055162-5445-43ff-b88a-c42d97ffcbb7"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["📤 Upload image, video, or audio file for deepfake detection:\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-34295d37-195e-4ac8-a0c0-cac0aac32cb9\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-34295d37-195e-4ac8-a0c0-cac0aac32cb9\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving clsss room.mp4 to clsss room.mp4\n","\n","📁 File: clsss room.mp4\n","📢 Detection Result:\n","✅ Real Video (Confidence: 50.0%)\n"]}]},{"cell_type":"code","source":["# ✅ Install required packages (for Colab)\n","!pip install opencv-python-headless pandas librosa soundfile scikit-learn --quiet\n","\n","# ✅ Imports\n","import os\n","import cv2\n","import numpy as np\n","import librosa\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.svm import SVC\n","from google.colab import files\n","from PIL import Image\n","\n","# ✅ Image Detection Function\n","def is_fake_image(img_path):\n","    image = cv2.imread(img_path)\n","    if image is None:\n","        return \"❌ Could not read image.\", None\n","\n","    height, width = image.shape[:2]\n","\n","    # Dummy confidence logic (placeholder)\n","    fake_confidence = round(np.clip((height * width) % 100, 50, 99), 2)\n","\n","    if fake_confidence > 75:\n","        return f\"🛑 Possibly AI-generated Image (Confidence: {fake_confidence}%)\", fake_confidence\n","    else:\n","        return f\"✅ Real Image (Confidence: {100 - fake_confidence}%)\", 100 - fake_confidence\n","\n","\n","# ✅ Video Detection Function\n","def is_fake_video(video_path):\n","    cap = cv2.VideoCapture(video_path)\n","    if not cap.isOpened():\n","        return \"❌ Could not read video.\", None\n","\n","    width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)\n","    height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)\n","    fps = cap.get(cv2.CAP_PROP_FPS)\n","    frame_count = cap.get(cv2.CAP_PROP_FRAME_COUNT)\n","    duration = frame_count / fps if fps > 0 else 0\n","\n","    complexity = width * height * duration\n","    fake_confidence = round(np.clip((complexity % 100), 50, 99), 2)\n","    cap.release()\n","\n","    if fake_confidence > 75:\n","        return f\"🛑 Possibly AI-generated Video (Confidence: {fake_confidence}%)\", fake_confidence\n","    else:\n","        return f\"✅ Real Video (Confidence: {100 - fake_confidence}%)\", 100 - fake_confidence\n","\n","\n","# ✅ Audio Feature Extraction\n","def extract_features(audio_file):\n","    audio, sr = librosa.load(audio_file, sr=None)\n","    mfccs = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=13)\n","    mfccs_scaled = np.mean(mfccs, axis=1)\n","    return mfccs_scaled\n","\n","\n","# ✅ Audio Model Loader (Dummy SVM)\n","def load_audio_model():\n","    model = SVC()\n","    real_features = np.random.rand(10, 13)\n","    fake_features = np.random.rand(10, 13)\n","    X_train = np.vstack([real_features, fake_features])\n","    y_train = np.array([0]*10 + [1]*10)\n","    scaler = StandardScaler()\n","    X_train_scaled = scaler.fit_transform(X_train)\n","    model.fit(X_train_scaled, y_train)\n","    return model, scaler\n","\n","\n","# ✅ Audio Detection Function\n","def detect_deepfake_audio(audio_file, model, scaler):\n","    features = extract_features(audio_file)\n","    features_scaled = scaler.transform([features])\n","    prediction = model.predict(features_scaled)\n","    return \"✅ Real Audio\" if prediction == 0 else \"🛑 Deepfake Audio\"\n","\n","\n","# ✅ Master Function\n","def main():\n","    print(\"📤 Upload image, video, or audio file for deepfake detection:\")\n","    uploaded = files.upload()\n","    model, scaler = load_audio_model()\n","\n","    for file_name in uploaded.keys():\n","        ext = file_name.split('.')[-1].lower()\n","        print(f\"\\n📁 File: {file_name}\")\n","\n","        if ext in ['jpg', 'jpeg', 'png']:\n","            result, _ = is_fake_image(file_name)\n","        elif ext in ['mp4', 'avi', 'mov', 'mkv']:\n","            result, _ = is_fake_video(file_name)\n","        elif ext in ['wav', 'mp3', 'flac', 'ogg']:\n","            result = detect_deepfake_audio(file_name, model, scaler)\n","        else:\n","            result = \"❌ Unsupported file type.\"\n","\n","        print(\"📢 Detection Result:\")\n","        print(result)\n","\n","\n","# ✅ Entry Point (fixed)\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":162},"id":"Gm6cPv2eZPBH","executionInfo":{"status":"ok","timestamp":1761211987841,"user_tz":-330,"elapsed":76495,"user":{"displayName":"Anirudh Y","userId":"18008724648865642661"}},"outputId":"70b5c1b8-e229-4263-c3a3-d466bc4854b3"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["📤 Upload image, video, or audio file for deepfake detection:\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-7f92c740-eb31-4ad7-875e-defd38a4efe0\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-7f92c740-eb31-4ad7-875e-defd38a4efe0\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving AIVoiceGenerator_com_25-04-2025T19_15_12_ Salli.mp3 to AIVoiceGenerator_com_25-04-2025T19_15_12_ Salli.mp3\n","\n","📁 File: AIVoiceGenerator_com_25-04-2025T19_15_12_ Salli.mp3\n","📢 Detection Result:\n","✅ Real Audio\n"]}]},{"cell_type":"code","source":["import base64\n","import os\n","\n","# --- WARNING: The string below is very long (over 100,000 characters) ---\n","# It represents the data of the space whale image.\n","base64_image_data = \"/content/Predator_Wallpaper_04_3840x2400.jpg\""],"metadata":{"id":"tHyb3q0Xcs_u","executionInfo":{"status":"ok","timestamp":1761212626270,"user_tz":-330,"elapsed":7,"user":{"displayName":"Anirudh Y","userId":"18008724648865642661"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"MbARzOEXc-6T"},"execution_count":null,"outputs":[]}]}